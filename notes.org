* Initial Setup
Install Emacs from Emacs GNU website.

When run the first time it will create the .emacs.d directory in 
C:\Users\USERID\AppData\Roaming.

It will not create the .emacs file that is supposed to be in the same directory. 
To create a .emacs file either change a setting or download a package. 
Either of these actions will generate a .emacs file. 
Personally, I like changing to a dark-mode theme so I can cool like all the other programmers.

To do this go to  Options > Customize Emacs > Custome Themes.
Then click a theme. I've been using 'Wheatgrass' lately.
Then click 'Save Theme Settings' and presto, a .emacs file is created.

Before editing the new .emacs file run the following:
#+begin_src lisp
package-list-packages
#+end_src

When prompted for MELPA license application hit 'a' for always. 
That will allow the license to apply to future sessions.

Now, configure the .emacs file to point towards a .el file where all user changes will be made. 
At the top of your .emacs place the following code under the (package-initialize) function:
#+begin_src lisp
(load-file "c:/path_to_emacs_dir/your_file_name.el")
#+end_src

Also check any file paths that may need to be changed: \\
Python Shell Interpretor \\
Abbreviations \\
YAS Snippets \\

Ideally, the next step would be to download the custom .el from [[Github][Github]] and place it in the location specified above.



* Installing Packages 

To install a package:
#+begin_src lisp
package-install
#+end_src

press return, then enter package name.

If the package you are trying to install is not found, try:
#+begin_src lisp
(package-refresh-contents)
#+end_src

This will download updated package lists from all of your added repos.

* Magit Notes
** Git setup <<Github>>
If on windows, install Git from [[gitforwindows.org]]
I mostly use the default settings other than the default text editor I set to NP++.
Emacs isn't an option.

Open the Git command window.

cd to destination of desired repo. 

Pull repo with clone command:
#+begin_src shell
git clone https://git.com/rjwilson18/REPO_NAME.git
#+end_src

** Git commands
*** Add to Repo
Add all files in directory: git add .
Add subfolder: git add subfolder/*
** Create Repository
#+begin_src lisp
 (magit-init)
#+end_src

** Open Magit Repo
1. go to directory using C-x f
2. Open magit status
 a. Set to C-x g
#+begin_src lisp
 (magit-status)
#+end_src

** Once in Repo
s to stage
u to unstage
tab to expand/collapse

** Commit
1. c will commit staged files
2. 2 buffers pop up.
 1. shows changes being committed
 2. allows you to enter commit message
3. C-c C-c performs commit

** Push
#+begin_src lisp
 (magit-push)
#+end_src

p to push to remote
** Misc
*** SSH Key
Create SSH Key:
ssh-keygen -o -t rsa -b 2048 "<email address>"
Do not enter a passphrase.

This will create three files in C:/users/<userID>/.ssh

1. id_rsa is private key
2. id_rsa.pub is public key (add this gitlab etc.)
3. config (go here if any of the options are wrong by default)
* Grphviz Notes
** Graphviz Setup
Download:
Windows: https://graphviz.org/download/
Ubuntu: sudo apt install graphviz

Make sure this block is in the .emacs

#+begin_src lisp
(org-babel-do-load-languages
 'org-babel-load-languages
   (quote
    (
     (dot . t)
    )
  )
)

#+end_src

** Use Example
#+name: daily_flow_node_table
|*node*|*label*|*shape*|*fillcolor*|
|------+-------+-------+-----------|
|start| drr_sas_begin| | |
|informatica|BDW/ODS | | |
|clm054|drr_sas_clm054_cat_dev|| |
|svc025|drr_sas_svc025_BI_UM_UIM|||
|aud016|drr_sas_aud016|||
|phs025|drr_sas_phs025_Agncy_Call_Tracker| |yelow|
|uw308|drr_sas_uw308_NY_NJ_HI_rnwls| | | 
|aud022|drr_sas_aud022_qa_pbi||yellow|
|clm086|drr_sas_clm086_Open_Leader_Diaries|||
|phs047|drr_sas_phs047_MIS_Project_email|||
|clm087|drr_sas_clm087_Home_Clms_at_Incptn|||
|clm092|drr_sas_clm092_Clms_CSC_1x1|||
|uw272|drr_sas_uw272_uw_pol_review||yellow|
|uw142|drr_sas_uw142_Umb_Binds|||
|aud008|drr_sas_aud008_nice_from_sas||yellow|
|admin001|drr_sas_admin001_mb_rnwl_eff_dt |||
|uw278|drr_sas_uw278_UmbNegChange_first||yellow|
|uw129|drr_sas_uw129_30_day_rprt_APP-PRE||yellow|
|svc050|drr_sas_svc050_mw1_non_pay|||
|svc050a|drr_sas_svc050_mail_addr_updt|||
|svc050b|drr_sas_svc050_ext_covg_a_yes_reject|||
|svc050c|drr_sas_svc050_uw_no_contact|||
|svc050d|drr_sas_svc050_LH_Mortgage_RTM|||
|admin018|drr_sas_admin018_asu_call_hist_codes||yellow|
|phs112|drr_sas_phs112_sale_per_day||yellow|
|mkt136|drr_sas_mkt136_advisor_dash_for_sales||yellow|
|uw337|drr_sas_uw337_online_mvr_clue_rev_wrkld||yellow|
|admin016|drr_sas_admin016_asu_ps1||yellow|
|admin016a|drr_sas_admin016_asu_ps2||yellow|
|admin016b|drr_sas_admin016_asu_ps2_ee||yellow|
|admin016c|drr_sas_admin016_asu_ps3||yellow|
|phs012|drr_sas_phs012_daily_quotes_by_rep||yellow|
|mkt136|drr_sas_mkt136_undeliverable_quotes||yellow|

#+name: daily_flow_path_table
|from|to|label|
|----+--+-----|
|start|clm054|success |
|start|svc025|success|
|start|aud016|success|
|aud016|aud022|done|
|start|phs025|success|
|start|uw308|success|
|start|aud008||success|
|aud022|aud009|done|
|clm054|clm086|done|
|phs025|phs047|done|
|clm086|clm087|done|
|clm087|clm092|done|
|uw308|uw272|done|
|uw272|uw142|done|
|uw142|admin001|done|
|informatica|aud008|success|
|admin001|uw278|done|
|uw278|uw129|done|
|svc025|svc050|done|
|svc050|svc050a|done|
|svc050a|svc050b|done|
|svc050b|svc050c|done|
|svc050c|svc050d|done|
|aud008|admin018|done|
|admin018|phs112|done|
|uw129|uw337|done|
|phs112|admin016|done|
|admin016|admin016a|done|
|admin016a|admin016b|done|
|admin016b|admin016c|done|
|admin016c|phs012|done|
|aud022|mkt136|done|

#+name: daily_flow_graph
#+HEADER: :var nodes=daily_flow_node_table graph=daily_flow_path_table
#+BEGIN_SRC emacs-lisp :colnames yes
     (concat
          "digraph {\n"
          "//rankdir=LR;\n" ;; remove comment characters '//' for horizontal layout; add for vertical layout
          (mapconcat
           (lambda (x)
             (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"]"
                             (car x)
                             (nth 1 x)
                             (if (string= "" (nth 2 x)) "box" (nth 2 x))
                             (if (string= "" (nth 3 x)) "none" (nth 3 x))
                             )) nodes "\n")
          "\n"
          (mapconcat
           (lambda (x)
             (format "%s -> %s [taillabel=\"%s\"]"
                             (car x) (nth 1 x) (nth 2 x))) graph "\n")
          "}\n")
#+END_SRC

#+RESULTS: daily_flow_graph


#+BEGIN_SRC dot :file "PATH/example.png" :noweb yes
<<daily_flow_graph()>>
#+END_SRC

#+RESULTS:
* Yas-Snippet
** Choose Value
START_OF_COMMAND ${1:$$(yas-choose-value '(option 1" "option 2" "option 3"))}
* Python/Pyenv
** Install PyEnv
Full instructions here: https://github.com/pyenv-win/pyenv-win

*** 1. Install
If Python is already installed:
#+begin_src bash
pip install pyenv-win --target %USERPROFILE%\.pyenv
#+end_src

OR

#+begin_src powershell
pip install pyenv-win --target $HOME\\.pyenv
#+end_src

If Python is not installed:
#+begin_src powershell
git clone https://github.com/pyenv-win/pyenv-win.git "$HOME/.pyenv"
#+end_src

*** 2. Disable Execution Alias
If running Windows 10 1905 or newer, disable the built-in Python launcher via Start > "Manage App Execution Aliases" and turning off the "App Installer" aliases for Python and Python3

*** 3. Manage Environment Variables
#+begin_src powershell
[System.Environment]::SetEnvironmentVariable('PYENV',$env:USERPROFILE + "\.pyenv\pyenv-win\","User")
[System.Environment]::SetEnvironmentVariable('PYENV_HOME',$env:USERPROFILE + "\.pyenv\pyenv-win\","User")
[System.Environment]::SetEnvironmentVariable('path', $env:USERPROFILE + "\.pyenv\pyenv-win\bin;" + $env:USERPROFILE + "\.pyenv\pyenv-win\shims;" + [System.Environment]::GetEnvironmentVariable('path', "User"),"User")
#+end_src

*** 4. Test
Restart shell/powershell

#+begin_src powershell or bash
pyenv --version
pyenv rehash
pyenv
#+end_src
** Usage
*** See all versions
#+begin_src powershell
pyenv versions
#+end_src

*** Install new version of Python
See possible list
#+begin_src powershell
pyenv install -l
#+end_src

Install chosen version
#+begin_src powershell
pyenv install 3.9.4
#+end_src

*** Switch Versions
#+begin_src powershell
pyenv global 3.9.4
#+end_src

See Current Version
#+begin_src powershell
pyenv version
#+end_src
